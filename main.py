import os
import asyncio
import logging
from threading import Thread
from dotenv import load_dotenv

from src.database import init_database
from src.client_bot import setup_client_bot
from src.worker_bot import setup_worker_bot
from src.web_admin import create_app

load_dotenv()

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

logging.getLogger('httpx').setLevel(logging.WARNING)
logging.getLogger('telegram').setLevel(logging.WARNING)

def run_flask_app():
    """Lance l'application Flask dans un thread s√©par√©"""
    app = create_app()
    app.run(host='0.0.0.0', port=5000, debug=False, use_reloader=False)

async def main():
    """
    Point d'entr√©e principal
    Lance les 2 bots Telegram et le dashboard Flask en parall√®le
    """
    logger.info("üöÄ D√©marrage de la Marketplace d'avis...")
    
    init_database()
    logger.info("‚úÖ Base de donn√©es initialis√©e")
    
    CLIENT_BOT_TOKEN = os.getenv('CLIENT_BOT_TOKEN')
    WORKER_BOT_TOKEN = os.getenv('WORKER_BOT_TOKEN')
    
    if not CLIENT_BOT_TOKEN or not WORKER_BOT_TOKEN:
        logger.error("‚ùå ERREUR: Les tokens des bots ne sont pas configur√©s")
        logger.info("\nVeuillez configurer les secrets suivants :")
        logger.info("CLIENT_BOT_TOKEN, WORKER_BOT_TOKEN, ADMIN_PASSWORD")
        logger.info("\nVous pouvez obtenir les tokens sur https://t.me/BotFather")
        return
    
    logger.info("ü§ñ Configuration des bots Telegram...")
    client_app = setup_client_bot(CLIENT_BOT_TOKEN)
    worker_app = setup_worker_bot(WORKER_BOT_TOKEN)
    
    logger.info("üåê D√©marrage du dashboard Flask...")
    flask_thread = Thread(target=run_flask_app, daemon=True)
    flask_thread.start()
    
    logger.info("‚úÖ Tous les services sont d√©marr√©s !")
    logger.info("\n" + "="*50)
    logger.info("üìä Dashboard Admin: http://0.0.0.0:5000")
    logger.info("   Username: admin")
    logger.info("   Password: (configur√© dans les secrets)")
    logger.info("="*50 + "\n")
    
    async with client_app, worker_app:
        await client_app.start()
        await client_app.updater.start_polling()
        logger.info("‚úÖ Bot Client d√©marr√© et en √©coute")
        
        await worker_app.start()
        await worker_app.updater.start_polling()
        logger.info("‚úÖ Bot Worker d√©marr√© et en √©coute")
        
        logger.info("\nüéâ Marketplace op√©rationnelle !")
        logger.info("Vous pouvez maintenant :")
        logger.info("  - Acc√©der au dashboard admin")
        logger.info("  - Parler aux bots sur Telegram")
        logger.info("\nAppuyez sur Ctrl+C pour arr√™ter\n")
        
        await asyncio.Event().wait()

if __name__ == '__main__':
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("\nüëã Arr√™t de la marketplace...")
    except Exception as e:
        logger.error(f"‚ùå Erreur fatale: {e}", exc_info=True)
